// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	proto "example.com/pet-project/gen/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddMovieToDatabase mocks base method.
func (m *MockDatabase) AddMovieToDatabase(arg0 *proto.AddMovieToDatabaseRequest) (*Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToDatabase", arg0)
	ret0, _ := ret[0].(*Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovieToDatabase indicates an expected call of AddMovieToDatabase.
func (mr *MockDatabaseMockRecorder) AddMovieToDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToDatabase", reflect.TypeOf((*MockDatabase)(nil).AddMovieToDatabase), arg0)
}

// AddMovieToLikes mocks base method.
func (m *MockDatabase) AddMovieToLikes(arg0 *proto.AddMovieToLikesRequest) (*Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToLikes", arg0)
	ret0, _ := ret[0].(*Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovieToLikes indicates an expected call of AddMovieToLikes.
func (mr *MockDatabaseMockRecorder) AddMovieToLikes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToLikes", reflect.TypeOf((*MockDatabase)(nil).AddMovieToLikes), arg0)
}

// AddMovieToWatchList mocks base method.
func (m *MockDatabase) AddMovieToWatchList(arg0 *proto.AddMovieToWatchListRequest) (*WatchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToWatchList", arg0)
	ret0, _ := ret[0].(*WatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovieToWatchList indicates an expected call of AddMovieToWatchList.
func (mr *MockDatabaseMockRecorder) AddMovieToWatchList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToWatchList", reflect.TypeOf((*MockDatabase)(nil).AddMovieToWatchList), arg0)
}

// AddReviewForMovie mocks base method.
func (m *MockDatabase) AddReviewForMovie(arg0 *proto.AddReviewRequest) (*Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReviewForMovie", arg0)
	ret0, _ := ret[0].(*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReviewForMovie indicates an expected call of AddReviewForMovie.
func (mr *MockDatabaseMockRecorder) AddReviewForMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReviewForMovie", reflect.TypeOf((*MockDatabase)(nil).AddReviewForMovie), arg0)
}

// AdminLogin mocks base method.
func (m *MockDatabase) AdminLogin(arg0 *proto.AdminLoginRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLogin", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLogin indicates an expected call of AdminLogin.
func (mr *MockDatabaseMockRecorder) AdminLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLogin", reflect.TypeOf((*MockDatabase)(nil).AdminLogin), arg0)
}

// DeleteFeedBack mocks base method.
func (m *MockDatabase) DeleteFeedBack(arg0 *proto.DeleteFeedBackRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedBack", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeedBack indicates an expected call of DeleteFeedBack.
func (mr *MockDatabaseMockRecorder) DeleteFeedBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedBack", reflect.TypeOf((*MockDatabase)(nil).DeleteFeedBack), arg0)
}

// DeleteMovieFromDatabase mocks base method.
func (m *MockDatabase) DeleteMovieFromDatabase(arg0 *proto.DeleteMovieFromDatabaseRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFromDatabase", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovieFromDatabase indicates an expected call of DeleteMovieFromDatabase.
func (mr *MockDatabaseMockRecorder) DeleteMovieFromDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFromDatabase", reflect.TypeOf((*MockDatabase)(nil).DeleteMovieFromDatabase), arg0)
}

// DeleteReviewForMovie mocks base method.
func (m *MockDatabase) DeleteReviewForMovie(arg0 *proto.DeleteReviewRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewForMovie", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReviewForMovie indicates an expected call of DeleteReviewForMovie.
func (mr *MockDatabaseMockRecorder) DeleteReviewForMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewForMovie", reflect.TypeOf((*MockDatabase)(nil).DeleteReviewForMovie), arg0)
}

// GetAllMovies mocks base method.
func (m *MockDatabase) GetAllMovies(arg0 *proto.GetAllMoviesRequest) ([]*proto.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies", arg0)
	ret0, _ := ret[0].([]*proto.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovies indicates an expected call of GetAllMovies.
func (mr *MockDatabaseMockRecorder) GetAllMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockDatabase)(nil).GetAllMovies), arg0)
}

// GetAllMoviess mocks base method.
func (m *MockDatabase) GetAllMoviess(arg0 *proto.GetAllMoviessRequest) ([]*proto.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMoviess", arg0)
	ret0, _ := ret[0].([]*proto.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMoviess indicates an expected call of GetAllMoviess.
func (mr *MockDatabaseMockRecorder) GetAllMoviess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMoviess", reflect.TypeOf((*MockDatabase)(nil).GetAllMoviess), arg0)
}

// GetFeedBack mocks base method.
func (m *MockDatabase) GetFeedBack(arg0 *proto.GetFeedBackRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedBack", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedBack indicates an expected call of GetFeedBack.
func (mr *MockDatabaseMockRecorder) GetFeedBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedBack", reflect.TypeOf((*MockDatabase)(nil).GetFeedBack), arg0)
}

// GetFeeedBack mocks base method.
func (m *MockDatabase) GetFeeedBack(arg0 *proto.GetFeeedBackRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeedBack", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeedBack indicates an expected call of GetFeeedBack.
func (mr *MockDatabaseMockRecorder) GetFeeedBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeedBack", reflect.TypeOf((*MockDatabase)(nil).GetFeeedBack), arg0)
}

// GetMovieByCategory mocks base method.
func (m *MockDatabase) GetMovieByCategory(arg0 *proto.GetMovieByCategoryRequest) ([]*proto.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByCategory", arg0)
	ret0, _ := ret[0].([]*proto.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByCategory indicates an expected call of GetMovieByCategory.
func (mr *MockDatabaseMockRecorder) GetMovieByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByCategory", reflect.TypeOf((*MockDatabase)(nil).GetMovieByCategory), arg0)
}

// GetMovieById mocks base method.
func (m *MockDatabase) GetMovieById(arg0 *proto.GetMovieByIdRequest) (*Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieById", arg0)
	ret0, _ := ret[0].(*Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieById indicates an expected call of GetMovieById.
func (mr *MockDatabaseMockRecorder) GetMovieById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieById", reflect.TypeOf((*MockDatabase)(nil).GetMovieById), arg0)
}

// GiveFeedBack mocks base method.
func (m *MockDatabase) GiveFeedBack(arg0 *proto.GiveFeedBackRequest) (*FeedBack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveFeedBack", arg0)
	ret0, _ := ret[0].(*FeedBack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GiveFeedBack indicates an expected call of GiveFeedBack.
func (mr *MockDatabaseMockRecorder) GiveFeedBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveFeedBack", reflect.TypeOf((*MockDatabase)(nil).GiveFeedBack), arg0)
}

// Login mocks base method.
func (m *MockDatabase) Login(arg0 *proto.LoginRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockDatabaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDatabase)(nil).Login), arg0)
}

// MarkAsRead mocks base method.
func (m *MockDatabase) MarkAsRead(arg0 *proto.MarkAsReadRequest) (*Viewed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", arg0)
	ret0, _ := ret[0].(*Viewed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockDatabaseMockRecorder) MarkAsRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockDatabase)(nil).MarkAsRead), arg0)
}

// MarkAsUnread mocks base method.
func (m *MockDatabase) MarkAsUnread(arg0 *proto.MarkAsUnreadRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsUnread", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsUnread indicates an expected call of MarkAsUnread.
func (mr *MockDatabaseMockRecorder) MarkAsUnread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsUnread", reflect.TypeOf((*MockDatabase)(nil).MarkAsUnread), arg0)
}

// Register mocks base method.
func (m *MockDatabase) Register(arg0 *proto.RegisterRequest) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockDatabaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDatabase)(nil).Register), arg0)
}

// RemoveMovieFromLikes mocks base method.
func (m *MockDatabase) RemoveMovieFromLikes(arg0 *proto.RemoveMovieFromLikesRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieFromLikes", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMovieFromLikes indicates an expected call of RemoveMovieFromLikes.
func (mr *MockDatabaseMockRecorder) RemoveMovieFromLikes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieFromLikes", reflect.TypeOf((*MockDatabase)(nil).RemoveMovieFromLikes), arg0)
}

// RemoveMovieFromWatchList mocks base method.
func (m *MockDatabase) RemoveMovieFromWatchList(arg0 *proto.RemoveMovieFromWatchListRequest) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieFromWatchList", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMovieFromWatchList indicates an expected call of RemoveMovieFromWatchList.
func (mr *MockDatabaseMockRecorder) RemoveMovieFromWatchList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieFromWatchList", reflect.TypeOf((*MockDatabase)(nil).RemoveMovieFromWatchList), arg0)
}

// SearchForMovies mocks base method.
func (m *MockDatabase) SearchForMovies(arg0 *proto.SearchRequest) ([]*proto.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForMovies", arg0)
	ret0, _ := ret[0].([]*proto.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForMovies indicates an expected call of SearchForMovies.
func (mr *MockDatabaseMockRecorder) SearchForMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForMovies", reflect.TypeOf((*MockDatabase)(nil).SearchForMovies), arg0)
}

// SearchForMoviess mocks base method.
func (m *MockDatabase) SearchForMoviess(arg0 *proto.SearchhRequest) ([]*proto.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForMoviess", arg0)
	ret0, _ := ret[0].([]*proto.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForMoviess indicates an expected call of SearchForMoviess.
func (mr *MockDatabaseMockRecorder) SearchForMoviess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForMoviess", reflect.TypeOf((*MockDatabase)(nil).SearchForMoviess), arg0)
}

// UpdateFeedBack mocks base method.
func (m *MockDatabase) UpdateFeedBack(arg0 *proto.UpdateFeedBackRequest) (*FeedBack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedBack", arg0)
	ret0, _ := ret[0].(*FeedBack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeedBack indicates an expected call of UpdateFeedBack.
func (mr *MockDatabaseMockRecorder) UpdateFeedBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedBack", reflect.TypeOf((*MockDatabase)(nil).UpdateFeedBack), arg0)
}

// UpdateProfile mocks base method.
func (m *MockDatabase) UpdateProfile(arg0 *proto.UpdateProfileRequest) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockDatabaseMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockDatabase)(nil).UpdateProfile), arg0)
}

// UpdateReviewForMovie mocks base method.
func (m *MockDatabase) UpdateReviewForMovie(arg0 *proto.UpdateReviewRequest) (*Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewForMovie", arg0)
	ret0, _ := ret[0].(*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewForMovie indicates an expected call of UpdateReviewForMovie.
func (mr *MockDatabaseMockRecorder) UpdateReviewForMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewForMovie", reflect.TypeOf((*MockDatabase)(nil).UpdateReviewForMovie), arg0)
}
