// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: movie-suggestions.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieSuggestionsServiceClient is the client API for MovieSuggestionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieSuggestionsServiceClient interface {
	// This rpc takes in Movie as input, adds that movie to database and sends that created movie back in response
	AddMovieToDatabase(ctx context.Context, in *AddMovieToDatabaseRequest, opts ...grpc.CallOption) (*AddMovieToDatabaseResponse, error)
	// This rpc takes in Movie Id as input, remove that movie from database and returns status and error in reponse based on result of that query
	DeleteMovieFromDatabase(ctx context.Context, in *DeleteMovieFromDatabaseRequest, opts ...grpc.CallOption) (*DeleteMovieFromDatabaseResponse, error)
	// This rpc takes in admin_id as input , validates that id and returns all the feedbacks posted by the user in response
	GetFeedBack(ctx context.Context, in *GetFeedBackRequest, opts ...grpc.CallOption) (MovieSuggestionsService_GetFeedBackClient, error)
	// This rpc takes in user credentials such as email and password as input and authenticates that user and returns access_token as output
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// This rpc takes in all user credentials adds them to user database and returns created user credentials
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// This rpc doesn't need any request paramter, it just sends all the movies present in the database in response
	GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...grpc.CallOption) (MovieSuggestionsService_GetAllMoviesClient, error)
	// This rpc takes in parameter based on name/category, if it is category again it selects that category which is passed in request argument ,
	// and if it is name it searches for all movies that start with that name and returns all that movies based on that condition in response
	SearchForMovies(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (MovieSuggestionsService_SearchForMoviesClient, error)
	// This rpc takes user_id and movie_id as request and returns added to watchlist movie in response
	AddMovieToWatchList(ctx context.Context, in *AddMovieToWatchListRequest, opts ...grpc.CallOption) (*AddMovieToWatchListResponse, error)
	// This rpc takes user_id and movie_id as request , deletes that movie from the database and returns status and error in reponse based on result of that query
	RemoveMovieFromWatchList(ctx context.Context, in *RemoveMovieFromWatchListRequest, opts ...grpc.CallOption) (*RemoveMovieFromWatchListResponse, error)
	// This rpc takes user_id and movie_id as request and returns added to likes movie in response
	AddMovieToLikes(ctx context.Context, in *AddMovieToLikesRequest, opts ...grpc.CallOption) (*AddMovieToLikesResponse, error)
	// This rpc takes user_id and movie_id as request , deletes that movie from the database and returns status and error in reponse based on result of that query
	RemoveMovieFromLikes(ctx context.Context, in *RemoveMovieFromLikesRequest, opts ...grpc.CallOption) (*RemoveMovieFromLikesResponse, error)
	// This rpc takes user_id movie_id and description of that review as request and returns created review as response
	AddReviewForMovie(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error)
	// This rpc takes user_id movie_id and description of review as request , updates the table based on condition and returns the updated review as response
	UpdateReviewForMovie(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error)
	// This rpc takes user_id movie_id as request , deletes that particular review and returns status and error in reponse based on result of that query
	DeleteReviewForMovie(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
	// This rpc takes user_id name email phone_number as request, updates them for that particular user and returns updated profile values as response
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// This rpc takes user_id and movie_id as request , adds that into viewed table and returns that added particular added row as response
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	// This rpc takes user_id and movie_id as request , removes that from viewed table and return status and error
	MarkAsUnread(ctx context.Context, in *MarkAsUnreadRequest, opts ...grpc.CallOption) (*MarkAsUnreadResponse, error)
	// This rpc takes in user_id description as request and returns newly created feedback as response
	GiveFeedBack(ctx context.Context, in *GiveFeedBackRequest, opts ...grpc.CallOption) (*GiveFeedBackResponse, error)
	// This rpc takes in user_id description as request , updates required values in the database and returns the updated feedback as response
	UpdateFeedBack(ctx context.Context, in *UpdateFeedBackRequest, opts ...grpc.CallOption) (*UpdateFeedBackResponse, error)
	// This rpc takes in user_id , feedback id as request deletes that particular feedback and returns status and error in reponse based on result of that query
	DeleteFeedBack(ctx context.Context, in *DeleteFeedBackRequest, opts ...grpc.CallOption) (*DeleteFeedBackResponse, error)
}

type movieSuggestionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieSuggestionsServiceClient(cc grpc.ClientConnInterface) MovieSuggestionsServiceClient {
	return &movieSuggestionsServiceClient{cc}
}

func (c *movieSuggestionsServiceClient) AddMovieToDatabase(ctx context.Context, in *AddMovieToDatabaseRequest, opts ...grpc.CallOption) (*AddMovieToDatabaseResponse, error) {
	out := new(AddMovieToDatabaseResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/AddMovieToDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) DeleteMovieFromDatabase(ctx context.Context, in *DeleteMovieFromDatabaseRequest, opts ...grpc.CallOption) (*DeleteMovieFromDatabaseResponse, error) {
	out := new(DeleteMovieFromDatabaseResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/DeleteMovieFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) GetFeedBack(ctx context.Context, in *GetFeedBackRequest, opts ...grpc.CallOption) (MovieSuggestionsService_GetFeedBackClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieSuggestionsService_ServiceDesc.Streams[0], "/proto.MovieSuggestionsService/GetFeedBack", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSuggestionsServiceGetFeedBackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieSuggestionsService_GetFeedBackClient interface {
	Recv() (*GetFeedBackResponse, error)
	grpc.ClientStream
}

type movieSuggestionsServiceGetFeedBackClient struct {
	grpc.ClientStream
}

func (x *movieSuggestionsServiceGetFeedBackClient) Recv() (*GetFeedBackResponse, error) {
	m := new(GetFeedBackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieSuggestionsServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...grpc.CallOption) (MovieSuggestionsService_GetAllMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieSuggestionsService_ServiceDesc.Streams[1], "/proto.MovieSuggestionsService/GetAllMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSuggestionsServiceGetAllMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieSuggestionsService_GetAllMoviesClient interface {
	Recv() (*GetAllMoviesResponse, error)
	grpc.ClientStream
}

type movieSuggestionsServiceGetAllMoviesClient struct {
	grpc.ClientStream
}

func (x *movieSuggestionsServiceGetAllMoviesClient) Recv() (*GetAllMoviesResponse, error) {
	m := new(GetAllMoviesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieSuggestionsServiceClient) SearchForMovies(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (MovieSuggestionsService_SearchForMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieSuggestionsService_ServiceDesc.Streams[2], "/proto.MovieSuggestionsService/SearchForMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSuggestionsServiceSearchForMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieSuggestionsService_SearchForMoviesClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type movieSuggestionsServiceSearchForMoviesClient struct {
	grpc.ClientStream
}

func (x *movieSuggestionsServiceSearchForMoviesClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieSuggestionsServiceClient) AddMovieToWatchList(ctx context.Context, in *AddMovieToWatchListRequest, opts ...grpc.CallOption) (*AddMovieToWatchListResponse, error) {
	out := new(AddMovieToWatchListResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/AddMovieToWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) RemoveMovieFromWatchList(ctx context.Context, in *RemoveMovieFromWatchListRequest, opts ...grpc.CallOption) (*RemoveMovieFromWatchListResponse, error) {
	out := new(RemoveMovieFromWatchListResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/RemoveMovieFromWatchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) AddMovieToLikes(ctx context.Context, in *AddMovieToLikesRequest, opts ...grpc.CallOption) (*AddMovieToLikesResponse, error) {
	out := new(AddMovieToLikesResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/AddMovieToLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) RemoveMovieFromLikes(ctx context.Context, in *RemoveMovieFromLikesRequest, opts ...grpc.CallOption) (*RemoveMovieFromLikesResponse, error) {
	out := new(RemoveMovieFromLikesResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/RemoveMovieFromLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) AddReviewForMovie(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error) {
	out := new(AddReviewResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/AddReviewForMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) UpdateReviewForMovie(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error) {
	out := new(UpdateReviewResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/UpdateReviewForMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) DeleteReviewForMovie(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	out := new(DeleteReviewResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/DeleteReviewForMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/MarkAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) MarkAsUnread(ctx context.Context, in *MarkAsUnreadRequest, opts ...grpc.CallOption) (*MarkAsUnreadResponse, error) {
	out := new(MarkAsUnreadResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/MarkAsUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) GiveFeedBack(ctx context.Context, in *GiveFeedBackRequest, opts ...grpc.CallOption) (*GiveFeedBackResponse, error) {
	out := new(GiveFeedBackResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/GiveFeedBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) UpdateFeedBack(ctx context.Context, in *UpdateFeedBackRequest, opts ...grpc.CallOption) (*UpdateFeedBackResponse, error) {
	out := new(UpdateFeedBackResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/UpdateFeedBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionsServiceClient) DeleteFeedBack(ctx context.Context, in *DeleteFeedBackRequest, opts ...grpc.CallOption) (*DeleteFeedBackResponse, error) {
	out := new(DeleteFeedBackResponse)
	err := c.cc.Invoke(ctx, "/proto.MovieSuggestionsService/DeleteFeedBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieSuggestionsServiceServer is the server API for MovieSuggestionsService service.
// All implementations must embed UnimplementedMovieSuggestionsServiceServer
// for forward compatibility
type MovieSuggestionsServiceServer interface {
	// This rpc takes in Movie as input, adds that movie to database and sends that created movie back in response
	AddMovieToDatabase(context.Context, *AddMovieToDatabaseRequest) (*AddMovieToDatabaseResponse, error)
	// This rpc takes in Movie Id as input, remove that movie from database and returns status and error in reponse based on result of that query
	DeleteMovieFromDatabase(context.Context, *DeleteMovieFromDatabaseRequest) (*DeleteMovieFromDatabaseResponse, error)
	// This rpc takes in admin_id as input , validates that id and returns all the feedbacks posted by the user in response
	GetFeedBack(*GetFeedBackRequest, MovieSuggestionsService_GetFeedBackServer) error
	// This rpc takes in user credentials such as email and password as input and authenticates that user and returns access_token as output
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// This rpc takes in all user credentials adds them to user database and returns created user credentials
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// This rpc doesn't need any request paramter, it just sends all the movies present in the database in response
	GetAllMovies(*GetAllMoviesRequest, MovieSuggestionsService_GetAllMoviesServer) error
	// This rpc takes in parameter based on name/category, if it is category again it selects that category which is passed in request argument ,
	// and if it is name it searches for all movies that start with that name and returns all that movies based on that condition in response
	SearchForMovies(*SearchRequest, MovieSuggestionsService_SearchForMoviesServer) error
	// This rpc takes user_id and movie_id as request and returns added to watchlist movie in response
	AddMovieToWatchList(context.Context, *AddMovieToWatchListRequest) (*AddMovieToWatchListResponse, error)
	// This rpc takes user_id and movie_id as request , deletes that movie from the database and returns status and error in reponse based on result of that query
	RemoveMovieFromWatchList(context.Context, *RemoveMovieFromWatchListRequest) (*RemoveMovieFromWatchListResponse, error)
	// This rpc takes user_id and movie_id as request and returns added to likes movie in response
	AddMovieToLikes(context.Context, *AddMovieToLikesRequest) (*AddMovieToLikesResponse, error)
	// This rpc takes user_id and movie_id as request , deletes that movie from the database and returns status and error in reponse based on result of that query
	RemoveMovieFromLikes(context.Context, *RemoveMovieFromLikesRequest) (*RemoveMovieFromLikesResponse, error)
	// This rpc takes user_id movie_id and description of that review as request and returns created review as response
	AddReviewForMovie(context.Context, *AddReviewRequest) (*AddReviewResponse, error)
	// This rpc takes user_id movie_id and description of review as request , updates the table based on condition and returns the updated review as response
	UpdateReviewForMovie(context.Context, *UpdateReviewRequest) (*UpdateReviewResponse, error)
	// This rpc takes user_id movie_id as request , deletes that particular review and returns status and error in reponse based on result of that query
	DeleteReviewForMovie(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error)
	// This rpc takes user_id name email phone_number as request, updates them for that particular user and returns updated profile values as response
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// This rpc takes user_id and movie_id as request , adds that into viewed table and returns that added particular added row as response
	MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error)
	// This rpc takes user_id and movie_id as request , removes that from viewed table and return status and error
	MarkAsUnread(context.Context, *MarkAsUnreadRequest) (*MarkAsUnreadResponse, error)
	// This rpc takes in user_id description as request and returns newly created feedback as response
	GiveFeedBack(context.Context, *GiveFeedBackRequest) (*GiveFeedBackResponse, error)
	// This rpc takes in user_id description as request , updates required values in the database and returns the updated feedback as response
	UpdateFeedBack(context.Context, *UpdateFeedBackRequest) (*UpdateFeedBackResponse, error)
	// This rpc takes in user_id , feedback id as request deletes that particular feedback and returns status and error in reponse based on result of that query
	DeleteFeedBack(context.Context, *DeleteFeedBackRequest) (*DeleteFeedBackResponse, error)
	mustEmbedUnimplementedMovieSuggestionsServiceServer()
}

// UnimplementedMovieSuggestionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieSuggestionsServiceServer struct {
}

func (UnimplementedMovieSuggestionsServiceServer) AddMovieToDatabase(context.Context, *AddMovieToDatabaseRequest) (*AddMovieToDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToDatabase not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) DeleteMovieFromDatabase(context.Context, *DeleteMovieFromDatabaseRequest) (*DeleteMovieFromDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieFromDatabase not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) GetFeedBack(*GetFeedBackRequest, MovieSuggestionsService_GetFeedBackServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeedBack not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) GetAllMovies(*GetAllMoviesRequest, MovieSuggestionsService_GetAllMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) SearchForMovies(*SearchRequest, MovieSuggestionsService_SearchForMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchForMovies not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) AddMovieToWatchList(context.Context, *AddMovieToWatchListRequest) (*AddMovieToWatchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToWatchList not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) RemoveMovieFromWatchList(context.Context, *RemoveMovieFromWatchListRequest) (*RemoveMovieFromWatchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMovieFromWatchList not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) AddMovieToLikes(context.Context, *AddMovieToLikesRequest) (*AddMovieToLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToLikes not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) RemoveMovieFromLikes(context.Context, *RemoveMovieFromLikesRequest) (*RemoveMovieFromLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMovieFromLikes not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) AddReviewForMovie(context.Context, *AddReviewRequest) (*AddReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReviewForMovie not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) UpdateReviewForMovie(context.Context, *UpdateReviewRequest) (*UpdateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReviewForMovie not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) DeleteReviewForMovie(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReviewForMovie not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) MarkAsUnread(context.Context, *MarkAsUnreadRequest) (*MarkAsUnreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsUnread not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) GiveFeedBack(context.Context, *GiveFeedBackRequest) (*GiveFeedBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveFeedBack not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) UpdateFeedBack(context.Context, *UpdateFeedBackRequest) (*UpdateFeedBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedBack not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) DeleteFeedBack(context.Context, *DeleteFeedBackRequest) (*DeleteFeedBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeedBack not implemented")
}
func (UnimplementedMovieSuggestionsServiceServer) mustEmbedUnimplementedMovieSuggestionsServiceServer() {
}

// UnsafeMovieSuggestionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieSuggestionsServiceServer will
// result in compilation errors.
type UnsafeMovieSuggestionsServiceServer interface {
	mustEmbedUnimplementedMovieSuggestionsServiceServer()
}

func RegisterMovieSuggestionsServiceServer(s grpc.ServiceRegistrar, srv MovieSuggestionsServiceServer) {
	s.RegisterService(&MovieSuggestionsService_ServiceDesc, srv)
}

func _MovieSuggestionsService_AddMovieToDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieToDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).AddMovieToDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/AddMovieToDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).AddMovieToDatabase(ctx, req.(*AddMovieToDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_DeleteMovieFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieFromDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).DeleteMovieFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/DeleteMovieFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).DeleteMovieFromDatabase(ctx, req.(*DeleteMovieFromDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_GetFeedBack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedBackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieSuggestionsServiceServer).GetFeedBack(m, &movieSuggestionsServiceGetFeedBackServer{stream})
}

type MovieSuggestionsService_GetFeedBackServer interface {
	Send(*GetFeedBackResponse) error
	grpc.ServerStream
}

type movieSuggestionsServiceGetFeedBackServer struct {
	grpc.ServerStream
}

func (x *movieSuggestionsServiceGetFeedBackServer) Send(m *GetFeedBackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieSuggestionsService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_GetAllMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllMoviesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieSuggestionsServiceServer).GetAllMovies(m, &movieSuggestionsServiceGetAllMoviesServer{stream})
}

type MovieSuggestionsService_GetAllMoviesServer interface {
	Send(*GetAllMoviesResponse) error
	grpc.ServerStream
}

type movieSuggestionsServiceGetAllMoviesServer struct {
	grpc.ServerStream
}

func (x *movieSuggestionsServiceGetAllMoviesServer) Send(m *GetAllMoviesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieSuggestionsService_SearchForMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieSuggestionsServiceServer).SearchForMovies(m, &movieSuggestionsServiceSearchForMoviesServer{stream})
}

type MovieSuggestionsService_SearchForMoviesServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type movieSuggestionsServiceSearchForMoviesServer struct {
	grpc.ServerStream
}

func (x *movieSuggestionsServiceSearchForMoviesServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieSuggestionsService_AddMovieToWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieToWatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).AddMovieToWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/AddMovieToWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).AddMovieToWatchList(ctx, req.(*AddMovieToWatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_RemoveMovieFromWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMovieFromWatchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).RemoveMovieFromWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/RemoveMovieFromWatchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).RemoveMovieFromWatchList(ctx, req.(*RemoveMovieFromWatchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_AddMovieToLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieToLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).AddMovieToLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/AddMovieToLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).AddMovieToLikes(ctx, req.(*AddMovieToLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_RemoveMovieFromLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMovieFromLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).RemoveMovieFromLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/RemoveMovieFromLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).RemoveMovieFromLikes(ctx, req.(*RemoveMovieFromLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_AddReviewForMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).AddReviewForMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/AddReviewForMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).AddReviewForMovie(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_UpdateReviewForMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).UpdateReviewForMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/UpdateReviewForMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).UpdateReviewForMovie(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_DeleteReviewForMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).DeleteReviewForMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/DeleteReviewForMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).DeleteReviewForMovie(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/MarkAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).MarkAsRead(ctx, req.(*MarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_MarkAsUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).MarkAsUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/MarkAsUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).MarkAsUnread(ctx, req.(*MarkAsUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_GiveFeedBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveFeedBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).GiveFeedBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/GiveFeedBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).GiveFeedBack(ctx, req.(*GiveFeedBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_UpdateFeedBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).UpdateFeedBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/UpdateFeedBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).UpdateFeedBack(ctx, req.(*UpdateFeedBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionsService_DeleteFeedBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionsServiceServer).DeleteFeedBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MovieSuggestionsService/DeleteFeedBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionsServiceServer).DeleteFeedBack(ctx, req.(*DeleteFeedBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieSuggestionsService_ServiceDesc is the grpc.ServiceDesc for MovieSuggestionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieSuggestionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MovieSuggestionsService",
	HandlerType: (*MovieSuggestionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMovieToDatabase",
			Handler:    _MovieSuggestionsService_AddMovieToDatabase_Handler,
		},
		{
			MethodName: "DeleteMovieFromDatabase",
			Handler:    _MovieSuggestionsService_DeleteMovieFromDatabase_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MovieSuggestionsService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MovieSuggestionsService_Register_Handler,
		},
		{
			MethodName: "AddMovieToWatchList",
			Handler:    _MovieSuggestionsService_AddMovieToWatchList_Handler,
		},
		{
			MethodName: "RemoveMovieFromWatchList",
			Handler:    _MovieSuggestionsService_RemoveMovieFromWatchList_Handler,
		},
		{
			MethodName: "AddMovieToLikes",
			Handler:    _MovieSuggestionsService_AddMovieToLikes_Handler,
		},
		{
			MethodName: "RemoveMovieFromLikes",
			Handler:    _MovieSuggestionsService_RemoveMovieFromLikes_Handler,
		},
		{
			MethodName: "AddReviewForMovie",
			Handler:    _MovieSuggestionsService_AddReviewForMovie_Handler,
		},
		{
			MethodName: "UpdateReviewForMovie",
			Handler:    _MovieSuggestionsService_UpdateReviewForMovie_Handler,
		},
		{
			MethodName: "DeleteReviewForMovie",
			Handler:    _MovieSuggestionsService_DeleteReviewForMovie_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _MovieSuggestionsService_UpdateProfile_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _MovieSuggestionsService_MarkAsRead_Handler,
		},
		{
			MethodName: "MarkAsUnread",
			Handler:    _MovieSuggestionsService_MarkAsUnread_Handler,
		},
		{
			MethodName: "GiveFeedBack",
			Handler:    _MovieSuggestionsService_GiveFeedBack_Handler,
		},
		{
			MethodName: "UpdateFeedBack",
			Handler:    _MovieSuggestionsService_UpdateFeedBack_Handler,
		},
		{
			MethodName: "DeleteFeedBack",
			Handler:    _MovieSuggestionsService_DeleteFeedBack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFeedBack",
			Handler:       _MovieSuggestionsService_GetFeedBack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllMovies",
			Handler:       _MovieSuggestionsService_GetAllMovies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchForMovies",
			Handler:       _MovieSuggestionsService_SearchForMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "movie-suggestions.proto",
}
